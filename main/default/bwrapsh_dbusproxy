#!/bin/bash



### init
## name
declare -x "XDG_RUNTIME_DIR"
declare -i "_gi_loop"
declare -a "_ga_exec_userbus"
declare -a "_ga_exec_systembus"
declare -a "_ga_exec_bwrapsh"
declare -a "_ga_exec_bwrapsh_userbus"
declare -a "_ga_exec_bwrapsh_systembus"
declare -a "_ga_exec_bwrapsh_home"
declare -a "_ga_exec_bwrapsh_save"
declare -a "_ga_exec_bwrapsh_network"

declare -g "_gs_init_name"
declare -g "_gs_init_exec"
declare -g "_gs_mode_profile"
declare -g "_gs_mode_test"
declare -g "_gs_part_userbus"
declare -g "_gs_part_systembus"
declare -g "_gs_part_home"
declare -g "_gs_part_save"
declare -g "_gs_part_network"
declare -g "_gs_dirs_profile"
declare -g "_gs_path_profile"
declare -g "_gs_dirs_userbus"
declare -g "_gs_path_userbus"
declare -g "_gs_dirs_systembus"
declare -g "_gs_path_systembus"
declare -g "_gs_dirs_home"
declare -g "_gs_path_home"
declare -g "_gs_dirs_data"
declare -g "_gs_dirs_data"
declare -g "_gs_path_file"
declare -g "_gs_path_file"
declare -ga "_ga_arg1_userbus"
declare -ga "_ga_arg1_systembus"
declare -ga "_ga_arg1_bwrapsh"
declare -ga "_ga_arg2_bwrapsh"


## function
function _gf_tool_echo () 
{
        declare -a "_la_exec_notifysend" ;
        #       #
        echo -e "\n${4}\033[${1:?}${2:?}: ${3:?}\033[0m" ;
        #       #
        _la_exec_notifysend=(
                '/usr/bin/notify-send'
                "${2}"
                "${3}"
        )
        #       #
        "${_la_exec_notifysend[@]}" ;
}
declare -F "_gf_tool_echo"

function _gf_tool_stps () 
{
        declare "_ls_stps"="${?}:${!}" ;
        declare -i "_li_stat"="${_ls_stps%%:*}" ;
        declare -i "_li_ppid"="${_ls_stps##*:}" ;
        #       #
        declare -i "_li_proc" ;
        declare -a "_la_exec_pgrep" ;
        #       #
        if [[ "${_li_stat}" != "0" ]] ; then
                exit "${_li_stat}" ;
        fi
        #       #
        _la_exec_pgrep=(
                '/usr/bin/pgrep'
                -P "${_li_ppid}"
                -x "${2:?}"
        )
        #       #
        _li_proc="$("${_la_exec_pgrep[@]}")" ;
        #       #
        declare -gi "_gi_proc_${1:?}"="${_li_proc}" ;
}
declare -F "_gf_tool_stps"

function _gf_tool_load () 
{
        declare -F "_ef_load_${1:?}" ;
        #       #
        if [[ "${?}" == "0" ]] ; then
                "_ef_load_${1}" ;
        fi
}
declare -F "_gf_tool_load"


## initialation
if [[ -z "${_gs_init_name}" ]] ; then
        _gs_init_name="${1:?}" || exit
fi


## profile
_gs_dirs_profile="/_and/config/bwrapsh/profile"
_gs_path_profile="${_gs_dirs_profile}/${_gs_init_name}"

if [[ -z "${_gs_mode_profile}" ]] ; then
        _gs_mode_profile="true"
fi

if [[ "${_gs_mode_profile}" == "true" && -r "${_gs_path_profile}" ]] ; then
        source "${_gs_path_profile}"
fi


## load
'_gf_tool_load' "init"


## environment
if [[ -e "${XDG_RUNTIME_DIR}" ]] ; then
        XDG_RUNTIME_DIR="/run/user/$('/usr/bin/id' -u)"
fi



### userbus
## load
'_gf_tool_load' "userbus"


## part
if [[ -z "${_gs_part_userbus}" ]] ; then
        _gs_part_userbus="true"
fi


## variable
_gs_dirs_userbus="${XDG_RUNTIME_DIR}/_bwrapsh/userbus"
_gs_path_userbus="${_gs_dirs_userbus}/${_gs_init_name}"


## check
if [[ "${_gs_part_userbus}" == "true" ]] ; then
        '/usr/bin/ss' -a | '/usr/bin/grep' --color "${_gs_path_userbus}"
else
        false
fi

if [[ "${?}" == "0" ]] ; then
        '_gf_tool_echo' "33m" "WARNING" "The program is running."
        exit "1"
fi


## array
_ga_exec_userbus=(
        '/usr/bin/xdg-dbus-proxy'
        ${DBUS_SESSION_BUS_ADDRESS}
        "${_gs_path_userbus}"
        --filter
        --talk="org.freedesktop.Notifications"
        --talk="org.kde.StatusNotifierWatcher"
        "${_ga_arg1_userbus[@]}"
)


## execute
if [[ "${_gs_part_userbus}" == "true" ]] ; then
        _ga_exec_bwrapsh_userbus=(
                --ro-bind "${_gs_path_userbus}" "${XDG_RUNTIME_DIR}/bus"
                --setenv "DBUS_SESSION_BUS_ADDRESS" "unix:path=${XDG_RUNTIME_DIR}/bus"
        )
        #       #
        '/usr/bin/mkdir' -pv "${_gs_dirs_userbus}" || exit
        #       #
        (
        "${_ga_exec_userbus[@]}"
        exit ) &
else
        true
fi


## watch
'_gf_tool_stps' "userbus" "xdg-dbus-proxy"


## wait
for _gi_loop in {1..100} ; do
        if [[ "${_gs_part_userbus}" != "true" ]] ; then
                break
        fi
        #       #
        '/usr/bin/ss' -a | '/usr/bin/grep' --color "${_gs_path_userbus}"
        #       #
        if [[ "${?}" == "0" ]] ; then
                break
        elif [[ "${_gi_loop}" -lt "10" ]] ; then
                '/usr/bin/sleep' "0.5s"
        else
                exit "1"
        fi
done



### systembus
## load
'_gf_tool_load' "systembus"


## part
if [[ -z "${_gs_part_systembus}" ]] ; then
        _gs_part_systembus="true"
fi


## variable
_gs_dirs_systembus="${XDG_RUNTIME_DIR}/_bwrapsh/systembus"
_gs_path_systembus="${_gs_dirs_systembus}/${_gs_init_name}"


## check
if [[ "${_gs_part_systembus}" == "true" ]] ; then
        '/usr/bin/ss' -a | '/usr/bin/grep' --color "${_gs_path_systembus}"
else
        false
fi

if [[ "${?}" == "0" ]] ; then
        '_gf_tool_echo' "33m" "WARNING" "The program is running."
        exit "1"
fi


## array
_ga_exec_systembus=(
        '/usr/bin/xdg-dbus-proxy'
        "unix:path=/run/dbus/system_bus_socket"
        "${_gs_path_systembus}"
        --filter
        "${_ga_arg1_systembus[@]}"
)


## execute
if [[ "${_gs_part_systembus}" == "true" ]] ; then
        _ga_exec_bwrapsh_systembus=(
                --ro-bind "${_gs_path_systembus}" "/run/dbus/system_bus_socket"
        )
        #       #
        '/usr/bin/mkdir' -pv "${_gs_dirs_systembus}" || exit
        #       #
        (
        "${_ga_exec_systembus[@]}"
        exit ) &
else
        true
fi


## watch
'_gf_tool_stps' "systembus" "xdg-dbus-proxy"


## wait
for _gi_loop in {1..100} ; do
        if [[ "${_gs_part_systembus}" != "true" ]] ; then
                break
        fi
        #       #
        '/usr/bin/ss' -a | '/usr/bin/grep' --color "${_gs_path_systembus}"
        #       #
        if [[ "${?}" == "0" ]] ; then
                break
        elif [[ "${_gi_loop}" -lt "10" ]] ; then
                '/usr/bin/sleep' "0.5s"
        else
                exit "1"
        fi
done



### home
## load
'_gf_tool_load' "home"


## part
if [[ -z "${_gs_part_home}" ]] ; then
        _gs_part_home="false"
fi


## variable
_gs_dirs_home="/_end/${USER}/_0_data/bwrapsh/home"
_gs_path_home="${_gs_dirs_home}/${_gs_init_name}"


## execute
if [[ "${_gs_part_home}" == "true" ]] ; then
        _ga_exec_bwrapsh_home=(
                --bind "${_gs_path_home}" "${HOME}"
                --tmpfs "${HOME}/.cache"
        )
        #       #
        '/usr/bin/mkdir' -pv "${_gs_path_home}"
fi



### save
## load
'_gf_tool_load' "save"


## part
if [[ -z "${_gs_part_save}" ]] ; then
        _gs_part_save="false"
fi


## variable
_gs_dirs_data="/_end/${USER}/_0_data/bwrapsh/dirs"
_gs_path_data="${_gs_dirs_data}/${_gs_init_name}"
_gs_dirs_file="/_end/${USER}/_0_file/bwrapsh/dirs"
_gs_path_file="${_gs_dirs_file}/${_gs_init_name}"


## execute
if [[ "${_gs_part_save}" == "true" ]] ; then
        _ga_exec_bwrapsh_save=(
                --bind-try "${_gs_path_data}"{,}
                --bind-try "${_gs_path_file}"{,}
        )
fi



### bwrap
## load
'_gf_tool_load' "bwrapsh"


## part
if [[ "${_gs_part_network}" == "true" ]] ; then
        _ga_exec_bwrapsh_network=(
                --share-net
        )
else
        _ga_exec_bwrapsh_network=(
                --unshare-net
        )
fi


## mode
if [[ "${_gs_mode_test}" == "true" ]] ; then
        _gs_init_exec="/bin/bash"
elif [[ -z "${_gs_init_exec}" ]] ; then
        _gs_init_exec="${2:?}" || exit
fi

if [[ "${_gs_init_exec}" == "_null" ]] ; then
        _gs_init_exec="/bin/sh"
fi


## argument
shift "1"
shift "1"


## array
_ga_exec_bwrapsh=(
        '/usr/bin/bwrap'
        --unshare-all
        --die-with-parent
        --proc "/proc"
        --dev "/dev"
        --tmpfs "/var"
        --tmpfs "/run"
        --tmpfs "/tmp"
        --tmpfs "/home"
        --ro-bind "/etc"{,}
        --ro-bind "/srv"{,}
        --ro-bind "/usr/bin"{,}
        --ro-bind "/usr/include"{,}
        --ro-bind "/usr/lib"{,}
        --ro-bind "/usr/lib64"{,}
        --ro-bind "/usr/libexec"{,}
        --ro-bind "/usr/share"{,}
        --ro-bind "/usr/src"{,}
        --symlink "/usr/bin" "/bin"
        --symlink "/usr/lib" "/lib"
        --symlink "/usr/lib64" "/lib64"
        --symlink "/run" "/var/run"
        --tmpfs "${XDG_RUNTIME_DIR}"
        --tmpfs "${HOME}"
        --unsetenv "PS1"
        --dev-bind "/dev/dri"{,}
        --ro-bind "/sys/dev/char"{,}
        --ro-bind "/sys/devices/pci0000:00"{,}
        --ro-bind "${XDG_RUNTIME_DIR}/${WAYLAND_DISPLAY}"{,}
        --setenv "WAYLAND_DISPLAY" "${WAYLAND_DISPLAY}"
        --ro-bind-try "${HOME}/.gtkrc-2.0"{,}
        --ro-bind-try "${HOME}/.config/gtkrc"{,}
        --ro-bind-try "${HOME}/.config/gtkrc-2.0"{,}
        --ro-bind-try "${HOME}/.config/gtk-3.0/assets"{,}
        --ro-bind-try "${HOME}/.config/gtk-3.0/color.css"{,}
        --ro-bind-try "${HOME}/.config/gtk-3.0/gtk.css"{,}
        --ro-bind-try "${HOME}/.config/gtk-3.0/settings.ini"{,}
        --ro-bind-try "${HOME}/.config/gtk-3.0/window_decorations.css"{,}
        --ro-bind-try "${HOME}/.config/gtk-4.0/assets"{,}
        --ro-bind-try "${HOME}/.config/gtk-4.0/color.css"{,}
        --ro-bind-try "${HOME}/.config/gtk-4.0/gtk.css"{,}
        --ro-bind-try "${HOME}/.config/gtk-4.0/settings.ini"{,}
        --ro-bind-try "${HOME}/.config/gtk-4.0/window_decorations.css"{,}
        --ro-bind-try "${HOME}/.config/user-dirs.locale"{,}
        "${_ga_exec_bwrapsh_userbus[@]}"
        "${_ga_exec_bwrapsh_systembus[@]}"
        "${_ga_exec_bwrapsh_home[@]}"
        "${_ga_exec_bwrapsh_save[@]}"
        "${_ga_exec_bwrapsh_network[@]}"
        "${_ga_arg1_bwrapsh[@]}"
        --remount-ro "/"
        --
        "${_gs_init_exec}"
        "${_ga_arg2_bwrapsh[@]}"
        "${@}"
)


## execute
"${_ga_exec_bwrapsh[@]}"



### over
## kill
'/usr/bin/kill' -15 "${_gi_proc_userbus}"
'/usr/bin/kill' -15 "${_gi_proc_systembus}"

