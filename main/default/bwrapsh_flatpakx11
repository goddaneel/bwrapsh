#!/bin/bash



### init
## name
declare -x "XDG_RUNTIME_DIR"
declare -x "DISPLAY"
declare -x "XAUTHORITY"
declare -i "_gi_stat_ss"
declare -a "_ga_exec_xauth"
declare -a "_ga_exec_xwayland"
declare -a "_ga_exec_bwrapicewm"
declare -a "_ga_exec_flatpak"
declare -a "_ga_exec_xwayland_xauth"
declare -a "_ga_exec_bwrapicewm_xauth"
declare -a "_ga_exec_flatpak_exec"

declare -g "_gs_init_name"
declare -g "_gs_init_exec"
declare -g "_gs_init_dpi"
declare -g "_gs_init_geometry"
declare -g "_gs_mode_profile"
declare -g "_gs_mode_test"
declare -g "_gs_mode_x11"
declare -g "_gs_mode_killflatpak"
declare -g "_gs_part_xauth"
declare -g "_gs_part_xwayland"
declare -g "_gs_part_icewm"
declare -g "_gs_dirs_profile"
declare -g "_gs_path_profile"
declare -g "_gs_dirs_xauth"
declare -g "_gs_path_xauth"
declare -g "_gs_path_x11socket"
declare -gi "_gi_init_x11"
declare -ga "_ga_arg1_xauth"
declare -ga "_ga_arg1_xwayland"
declare -ga "_ga_arg1_bwrapicewm"
declare -ga "_ga_arg2_bwrapicewm"
declare -ga "_ga_arg1_flatpak"


## function
function _gf_tool_echo () 
{
        declare -a "_la_exec_notifysend" ;
        #       #
        echo -e "\n${4}\033[${1:?}${2:?}: ${3:?}\033[0m" ;
        #       #
        _la_exec_notifysend=(
                '/usr/bin/notify-send'
                "${2}"
                "${3}"
        )
        #       #
        "${_la_exec_notifysend[@]}" ;
}
declare -F "_gf_tool_echo"

function _gf_tool_stps () 
{
        declare "_ls_stps"="${?}:${!}" ;
        declare -i "_li_stat"="${_ls_stps%%:*}" ;
        declare -i "_li_ppid"="${_ls_stps##*:}" ;
        #       #
        declare -i "_li_proc" ;
        declare -a "_la_exec_pgrep" ;
        #       #
        if [[ "${_li_stat}" != "0" ]] ; then
                exit "${_li_stat}" ;
        fi
        #       #
        _la_exec_pgrep=(
                '/usr/bin/pgrep'
                -P "${_li_ppid}"
                -x "${2:?}"
        )
        #       #
        _li_proc="$("${_la_exec_pgrep[@]}")" ;
        #       #
        declare -gi "_gi_proc_${1:?}"="${_li_proc}" ;
}
declare -F "_gf_tool_stps"

function _gf_tool_load () 
{
        declare -F "_ef_load_${1:?}" ;
        #       #
        if [[ "${?}" == "0" ]] ; then
                "_ef_load_${1}" ;
        fi
}
declare -F "_gf_tool_load"


## initialation
if [[ -z "${_gs_init_name}" ]] ; then
        _gs_init_name="${1:?}" || exit
fi


## profile
_gs_dirs_profile="/_and/config/bwrapsh/profile_flatpak"
_gs_path_profile="${_gs_dirs_profile}/${_gs_init_name}"

if [[ -z "${_gs_mode_profile}" ]] ; then
        _gs_mode_profile="true"
fi

if [[ "${_gs_mode_profile}" == "true" && -r "${_gs_path_profile}" ]] ; then
        source "${_gs_path_profile}"
fi


## load
'_gf_tool_load' "init"


## environment
if [[ -e "${XDG_RUNTIME_DIR}" ]] ; then
        XDG_RUNTIME_DIR="/run/user/$('/usr/bin/id' -u)"
fi


## check
'/usr/bin/flatpak' info -M "${_gs_init_name}" 1>"/dev/null" || exit



### x11
## variable
if [[ -z "${_gi_init_x11}" ]] ; then
        _gi_init_x11="$(( "$('/usr/bin/id' -u)" + "11" ))"
        _gs_mode_x11="auto"
elif [[ "${_gs_mode_x11}" != "major" ]] ; then
        _gs_mode_x11="minor"
fi


## check
while true ; do
        _gs_path_x11socket="/tmp/.X11-unix/X${_gi_init_x11}"
        #       #
        '/usr/bin/ss' -a | '/usr/bin/grep' "${_gs_path_x11socket}"
        #       #
        _gi_stat_ss="${?}"
        #       #
        if [[ "${_gi_init_x11}" -lt "1" || "${_gi_init_x11}" -gt "60000" ]] ; then
                '_gf_tool_echo' "31m" "ERROR" "Display is unavailable."
                exit "1"
        elif [[ "${_gs_mode_x11}" == "major" && "${_gi_stat_ss}" == "0" ]] ; then
                '_gf_tool_echo' "31m" "ERROR" "Display is unavailable."
                exit "1"
        elif [[ "${_gs_mode_x11}" == "minor" && "${_gi_stat_ss}" != "0" ]] ; then
                _gs_mode_x11="major"
        elif [[ "${_gs_mode_x11}" == "minor" && "${_gi_stat_ss}" == "0" ]] ; then
                break
        elif [[ "${_gi_init_x11}" == "${DISPLAY}" ]] ; then
                _gi_init_x11="$(( "${_gi_init_x11}" + "1" ))"
        elif [[ -e "/tmp/.X${_gi_init_x11}-lock" ]] ; then
                _gi_init_x11="$(( "${_gi_init_x11}" + "1" ))"
        elif [[ "${_gi_stat_ss}" == "0" ]] ; then
                _gi_init_x11="$(( "${_gi_init_x11}" + "1" ))"
        else
                break
        fi
done


## part
if [[ "${_gs_mode_x11}" == "minor" ]] ; then
        _gs_part_xauth="false"
        _gs_part_xwayland="false"
        _gs_part_icewm="false"
fi



### xauth
## load
'_gf_tool_load' "xauth"


## part
if [[ -z "${_gs_part_xauth}" ]] ; then
        _gs_part_xauth="true"
fi


## variable
_gs_dirs_xauth="${XDG_RUNTIME_DIR}/_bwrapsh/xauth"
_gs_path_xauth="${_gs_dirs_xauth}/${_gi_init_x11}"


## array
_ga_exec_xauth=(
        '/usr/bin/xauth'
        -f "${_gs_path_xauth}"
        add
        "${HOST}:${_gi_init_x11}"
        "."
        "$(mcookie)"
        "${_ga_arg1_xauth[@]}"
)


## execute
if [[ "${_gs_part_xauth}" == "true" ]] ; then
        _ga_exec_xwayland_xauth=(
                -auth "${_gs_path_xauth}"
        )
        #       #
        _ga_exec_bwrapicewm_xauth=(
                --ro-bind "${_gs_path_xauth}" "${XDG_RUNTIME_DIR}/xauth"
                --setenv "XAUTHORITY" "${XDG_RUNTIME_DIR}/xauth"
        )
        #       #
        '/usr/bin/mkdir' -pv "${_gs_dirs_xauth}" || exit
        #       #
        "${_ga_exec_xauth[@]}" || exit
fi



### xwayland
## load
'_gf_tool_load' "xwayland"


## part
if [[ -z "${_gs_part_xwayland}" ]] ; then
        _gs_part_xwayland="true"
fi


## array
_ga_exec_xwayland=(
        '/usr/bin/Xwayland'
        ":${_gi_init_x11}"
        -nolisten tcp
        -decorate
        -hidpi
        -dpi "${_gs_init_dpi:-"125"}"
        -geometry "${_gs_init_geometry:-"1227x632"}"
        "${_ga_exec_xwayland_xauth[@]}"
        "${_ga_arg1_xwayland[@]}"
)


## execute
if [[ "${_gs_part_xwayland}" == "true" ]] ; then
        (
        "${_ga_exec_xwayland[@]}"
        exit ) &
else
        true
fi


## watch
'_gf_tool_stps' "xwayland" "Xwayland"


## wait
for _gi_loop in {1..100} ; do
        '/usr/bin/ss' -a | '/usr/bin/grep' "${_gs_path_x11socket}"
        #       #
        if [[ "${?}" == "0" ]] ; then
                break
        elif [[ "${_gi_loop}" -lt "10" ]] ; then
                '/usr/bin/sleep' "0.5s"
        else
                exit "1"
        fi
done



### icewm
## load
'_gf_tool_load' "bwrapicewm"


## part
if [[ -z "${_gs_part_icewm}" ]] ; then
        _gs_part_icewm="true"
fi


## array
_ga_exec_bwrapicewm=(
        '/usr/bin/bwrap'
        --unshare-all
        --die-with-parent
        --proc "/proc"
        --dev "/dev"
        --tmpfs "/var"
        --tmpfs "/run"
        --tmpfs "/tmp"
        --tmpfs "/home"
        --ro-bind "/etc"{,}
        --ro-bind "/srv"{,}
        --ro-bind "/usr/bin"{,}
        --ro-bind "/usr/include"{,}
        --ro-bind "/usr/lib"{,}
        --ro-bind "/usr/lib64"{,}
        --ro-bind "/usr/libexec"{,}
        --ro-bind "/usr/share"{,}
        --ro-bind "/usr/src"{,}
        --symlink "/usr/bin" "/bin"
        --symlink "/usr/lib" "/lib"
        --symlink "/usr/lib64" "/lib64"
        --symlink "/run" "/var/run"
        --tmpfs "${XDG_RUNTIME_DIR}"
        --tmpfs "${HOME}"
        --unsetenv "PS1"
        --dev-bind "/dev/dri"{,}
        --ro-bind "/sys/dev/char"{,}
        --ro-bind "/sys/devices/pci0000:00"{,}
        --ro-bind "${XDG_RUNTIME_DIR}/${WAYLAND_DISPLAY}"{,}
        --setenv "WAYLAND_DISPLAY" "${WAYLAND_DISPLAY}"
        --ro-bind "${_gs_path_x11socket}"{,}
        --setenv "DISPLAY" ":${_gi_init_x11}"
        --setenv "XDG_SESSION_TYPE" "x11"
        --ro-bind-try "${HOME}/.gtkrc-2.0"{,}
        --ro-bind-try "${HOME}/.config/gtkrc"{,}
        --ro-bind-try "${HOME}/.config/gtkrc-2.0"{,}
        --ro-bind-try "${HOME}/.config/gtk-3.0/assets"{,}
        --ro-bind-try "${HOME}/.config/gtk-3.0/color.css"{,}
        --ro-bind-try "${HOME}/.config/gtk-3.0/gtk.css"{,}
        --ro-bind-try "${HOME}/.config/gtk-3.0/settings.ini"{,}
        --ro-bind-try "${HOME}/.config/gtk-3.0/window_decorations.css"{,}
        --ro-bind-try "${HOME}/.config/gtk-4.0/assets"{,}
        --ro-bind-try "${HOME}/.config/gtk-4.0/color.css"{,}
        --ro-bind-try "${HOME}/.config/gtk-4.0/gtk.css"{,}
        --ro-bind-try "${HOME}/.config/gtk-4.0/settings.ini"{,}
        --ro-bind-try "${HOME}/.config/gtk-4.0/window_decorations.css"{,}
        --ro-bind-try "${HOME}/.config/user-dirs.locale"{,}
        --ro-bind "/dev/null" "/usr/share/icewm/keys"
        --ro-bind "/dev/null" "/usr/share/icewm/menu"
        --ro-bind "/dev/null" "/usr/share/icewm/toolbar"
        --ro-bind "/dev/null" "/usr/share/icewm/preferences"
        --ro-bind-try "/_and/config/bwrapsh/patches_flatpak/icewm" "${HOME}/.config/icewm"
        "${_ga_exec_bwrapicewm_xauth[@]}"
        "${_ga_arg1_bwrapicewm[@]}"
        --remount-ro "/"
        --
        '/usr/bin/icewm'
        --theme="Infadel2"
        -o "${HOME}/.icewm.log"
        "${_ga_arg2_bwrapicewm[@]}"
)


## execute
if [[ "${_gs_part_icewm}" == "true" ]] ; then
        (
        "${_ga_exec_bwrapicewm[@]}"
        exit ) &
else
        true
fi


## watch
'_gf_tool_stps' "bwrapicewm" "bwrap"



### flatpak
## load
'_gf_tool_load' "flatpak"


## variable
DISPLAY=":${_gi_init_x11}"
XAUTHORITY="${_gs_path_xauth}"


## mode
if [[ "${_gs_mode_test}" == "true" ]] ; then
        _gs_init_exec="bash"
elif [[ -z "${_gs_init_exec}" ]] ; then
        _gs_init_exec="${2:?}" || exit
fi

if [[ "${_gs_init_exec}" == "_null" ]] ; then
        unset -v "_gs_init_exec"
fi

if [[ -n "${_gs_init_exec}" ]] ; then
        _ga_exec_flatpak_exec=(
                --command="${_gs_init_exec}"
        )
fi


## argument
shift "1"
shift "1"


## array
_ga_exec_flatpak=(
        '/usr/bin/flatpak'
        run
        --socket="x11"
        --env=GTK_IM_MODULE="${GTK_IM_MODULE}"
        --env=QT_IM_MODULE="${QT_IM_MODULE}"
        --env=SDL_IM_MODULE="${SDL_IM_MODULE}"
        "${_ga_exec_flatpak_exec[@]}"
        "${_ga_arg1_flatpak[@]}"
        "${_gs_init_name}"
        "${@}"
)


## execute
"${_ga_exec_flatpak[@]}"


## kill
if [[ "${_gs_mode_killflatpak}" == "true" ]] ; then
        '/usr/bin/flatpak' ps | '/usr/bin/grep' "${_gs_init_name}"
else
        false
fi

if [[ "${?}" == "0" ]] ; then
        '/usr/bin/flatpak' kill -v "${_gs_init_name}"
fi



### over
## kill
if [[ "${_gs_mode_x11}" == "auto" ]] ; then
        '/usr/bin/kill' -15 "${_gi_proc_bwrapicewm}"
        wait "${!}"
        '/usr/bin/kill' -15 "${_gi_proc_xwayland}"
fi

